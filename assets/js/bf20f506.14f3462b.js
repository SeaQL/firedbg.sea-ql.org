"use strict";(self.webpackChunkfiredbg=self.webpackChunkfiredbg||[]).push([[134],{8621:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(6687);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),l=c(r),y=a,f=l["".concat(s,".").concat(y)]||l[y]||d[y]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=y;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[l]="string"==typeof e?e:a,i[1]=u;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},2318:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var n=r(557),a=(r(6687),r(8621));const o={},i="What is an Query Builder",u={unversionedId:"introduction/query-builder",id:"introduction/query-builder",title:"What is an Query Builder",description:"SeaQuery is a query builder to help you construct dynamic SQL queries in Rust.",source:"@site/docs/01-introduction/01-query-builder.md",sourceDirName:"01-introduction",slug:"/introduction/query-builder",permalink:"/docs/introduction/query-builder",draft:!1,editUrl:"https://github.com/SeaQL/firedbg.sea-ql.org/edit/master/FireDBG/docs/01-introduction/01-query-builder.md",tags:[],version:"current",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1698489876,formattedLastUpdatedAt:"Oct 28, 2023",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Index",permalink:"/docs/index"},next:{title:"SeaQuery Concepts",permalink:"/docs/introduction/sea-query"}},s={},c=[],p={toc:c},l="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(l,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"what-is-an-query-builder"},"What is an Query Builder"),(0,a.kt)("p",null,"SeaQuery is a query builder to help you construct dynamic SQL queries in Rust.\nYou can construct expressions, queries and schema as abstract syntax trees using an ergonomic API.\nWe support MySQL, Postgres and SQLite behind a common interface that aligns their behaviour where appropriate."),(0,a.kt)("p",null,"We provide integration for ",(0,a.kt)("a",{parentName:"p",href:"https://crates.io/crates/sqlx"},"SQLx"),",\n",(0,a.kt)("a",{parentName:"p",href:"https://crates.io/crates/postgres"},"postgres")," and ",(0,a.kt)("a",{parentName:"p",href:"https://crates.io/crates/rusqlite"},"rusqlite"),".\nSee ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-query/blob/master/examples"},"examples")," for usage."),(0,a.kt)("p",null,"SeaQuery is the foundation of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm"},"SeaORM"),", an async & dynamic ORM for Rust."))}d.isMDXComponent=!0}}]);