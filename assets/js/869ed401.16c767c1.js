"use strict";(self.webpackChunkfiredbg=self.webpackChunkfiredbg||[]).push([[934],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=c(r),m=n,d=h["".concat(l,".").concat(m)]||h[m]||p[m]||o;return r?a.createElement(d,i(i({ref:t},u),{},{components:r})):a.createElement(d,i({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7236:(e,t,r)=>{r.d(t,{E:()=>o,n:()=>n});var a=r(7294);function n(e){let{src:t}=e;const r=t.replace("-dark","-light"),n=t.replace("-light","-dark");return a.createElement(a.Fragment,null,a.createElement("video",{controls:!0,muted:!0,autoPlay:!0,loop:!0,style:{width:"100%"},"data-theme":"light"},a.createElement("source",{src:r,type:"video/mp4"})),a.createElement("video",{controls:!0,muted:!0,autoPlay:!0,loop:!0,style:{width:"100%"},"data-theme":"dark"},a.createElement("source",{src:n,type:"video/mp4"})))}function o(e){const t=e.src.replace("-dark","-light"),r=e.src.replace("-light","-dark"),n=()=>a.createElement(a.Fragment,null,a.createElement("img",{style:{width:"100%"},src:`${t}#light`}),a.createElement("img",{style:{width:"100%"},src:`${r}#dark`}));return void 0===e.children?n():a.createElement("table",null,a.createElement("tbody",null,a.createElement("tr",{style:{backgroundColor:"unset"}},a.createElement("td",null,n())),a.createElement("tr",{style:{backgroundColor:"unset"}},a.createElement("td",{style:{color:"var(--ifm-blockquote-color)"}},e.children))))}},2354:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=r(7462),n=(r(7294),r(3905)),o=r(7236);const i={slug:"2023-12-12-introducing-firedbg",title:"Introducing FireDBG for Rust",author:"Chris Tsang",author_title:"FireDBG Team",author_url:"https://github.com/tyt2y3",author_image_url:"https://avatars.githubusercontent.com/u/1782664?v=4",image:"https://firedbg.sea-ql.org/img/banner-introducing-firedbg.png",tags:["news"]},s=void 0,l={permalink:"/blog/2023-12-12-introducing-firedbg",editUrl:"https://github.com/SeaQL/firedbg.sea-ql.org/edit/main/FireDBG/blog/blog/2023-12-12-introducing-firedbg.mdx",source:"@site/blog/2023-12-12-introducing-firedbg.mdx",title:"Introducing FireDBG for Rust",description:"Debugging programs is hard",date:"2023-12-12T00:00:00.000Z",formattedDate:"December 12, 2023",tags:[{label:"news",permalink:"/blog/tags/news"}],readingTime:12.03,hasTruncateMarker:!1,authors:[{name:"Chris Tsang",title:"FireDBG Team",url:"https://github.com/tyt2y3",imageURL:"https://avatars.githubusercontent.com/u/1782664?v=4"}],frontMatter:{slug:"2023-12-12-introducing-firedbg",title:"Introducing FireDBG for Rust",author:"Chris Tsang",author_title:"FireDBG Team",author_url:"https://github.com/tyt2y3",author_image_url:"https://avatars.githubusercontent.com/u/1782664?v=4",image:"https://firedbg.sea-ql.org/img/banner-introducing-firedbg.png",tags:["news"]},prevItem:{title:"Getting Started",permalink:"/blog/2023-12-13-getting-started"},nextItem:{title:"Architecture of FireDBG",permalink:"/blog/2023-12-11-architecture-of-firedbg"}},c={authorsImageUrls:[void 0]},u=[{value:"Debugging programs is hard",id:"debugging-programs-is-hard",level:2},{value:"That&#39;s why we created FireDBG - a Time Travel Visual Debugger for Rust \ud83c\udfac",id:"thats-why-we-created-firedbg---a-time-travel-visual-debugger-for-rust-",level:3},{value:"Time travel debugging",id:"time-travel-debugging",level:2},{value:"Call tree - the trail across the forest",id:"call-tree---the-trail-across-the-forest",level:2},{value:"Call tree visualization and algorithms",id:"call-tree-visualization-and-algorithms",level:2},{value:"Tracing errors - the error path",id:"tracing-errors---the-error-path",level:2},{value:"Collecting parameters and return values",id:"collecting-parameters-and-return-values",level:2},{value:"A type system for the Rust type system",id:"a-type-system-for-the-rust-type-system",level:2},{value:"A new lens into our code",id:"a-new-lens-into-our-code",level:2},{value:"I want to debug <em>my code</em> - not system libraries!",id:"i-want-to-debug-my-code---not-system-libraries",level:2},{value:"Multi-threaded programming \ud83c\udfac",id:"multi-threaded-programming-",level:2},{value:"The vision",id:"the-vision",level:2},{value:"Let&#39;s work together!",id:"lets-work-together",level:2},{value:"Call for stargazers",id:"call-for-stargazers",level:3},{value:"Call for early adopters",id:"call-for-early-adopters",level:3},{value:"Call for co-founder",id:"call-for-co-founder",level:3},{value:"Acknowledgement",id:"acknowledgement",level:2}],h={toc:u},p="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"debugging-programs-is-hard"},"Debugging programs is hard"),(0,n.kt)("p",null,"Debugging programs is hard. It is extremely mind boggling when something does not work as expected. More often than not 90% of the work is on tracking down ",(0,n.kt)("em",{parentName:"p"},"where")," the bug is, and 10% is actually solving it!"),(0,n.kt)("p",null,"But why don't programmers use debuggers more often these days? Instead, we all enjoy adding ",(0,n.kt)("inlineCode",{parentName:"p"},"println")," all over the place, running the program, adding more prints, rinse and repeat, just to find out that we still haven't printed the key variable and may even need to make guesses about the program state while drowning in the logs."),(0,n.kt)("p",null,"A running program is like a blackbox to us, and the console is our only window into its internal states. However, at the end of the day, it is still the programmer's responsibility to print the relevant information."),(0,n.kt)("p",null,"How does a debugger help us debug a program? We identified that it usually comes down to:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Where did the control flow of my program go?"),(0,n.kt)("li",{parentName:"ul"},"Where do my errors come from?"),(0,n.kt)("li",{parentName:"ul"},"What are inside my variables?"),(0,n.kt)("li",{parentName:"ul"},"What happened in what order?")),(0,n.kt)("h3",{id:"thats-why-we-created-firedbg---a-time-travel-visual-debugger-for-rust-"},"That's why we created FireDBG - a Time Travel Visual Debugger for Rust \ud83c\udfac"),(0,n.kt)(o.n,{src:"/img/quicksort-mac-light.mp4",mdxType:"Video"}),(0,n.kt)("h2",{id:"time-travel-debugging"},"Time travel debugging"),(0,n.kt)("p",null,'According to Wikipedia, time travel debugging is the process of stepping back in time through source code to understand what is happening during execution of a computer program. Unlike "traditional" debuggers which can only step forward, time travel debuggers allow us to step backward and see the cause and effects.'),(0,n.kt)("p",null,"Time travel debuggers exist",(0,n.kt)("sup",{parentName:"p",id:"fnref-1-3c097c"},(0,n.kt)("a",{parentName:"sup",href:"#fn-1-3c097c",className:"footnote-ref"},"1")),", and they usually work by recording data on the instruction level. But that would result in a gigantic amount of data, so now the question is: how do we make sense of this data and ",(0,n.kt)("em",{parentName:"p"},"navigate through time")," effectively?"),(0,n.kt)("h2",{id:"call-tree---the-trail-across-the-forest"},"Call tree - the trail across the forest"),(0,n.kt)("p",null,"Let's take a look at the following call tree for an implementation of quicksort:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn run<T: PartialOrd>(arr: &mut [T]) {\n    let len = arr.len();\n    quick_sort(arr, 0, (len - 1) as isize);\n}\n\nfn quick_sort<T: PartialOrd>(arr: &mut [T], low: isize, high: isize) {\n    if low < high {\n        let p = partition(arr, low, high);\n        quick_sort(arr, low, p - 1);\n        quick_sort(arr, p + 1, high);\n    }\n}\n\nfn partition<T: PartialOrd>(arr: &mut [T], low: isize, high: isize) -> isize {\n    let pivot = high as usize;\n    let mut store_index = low - 1;\n    let mut last_index = high;\n\n    loop {\n        store_index += 1;\n        while arr[store_index as usize] < arr[pivot] {\n            store_index += 1;\n        }\n        last_index -= 1;\n        while last_index >= 0 && arr[last_index as usize] > arr[pivot] {\n            last_index -= 1;\n        }\n        if store_index >= last_index {\n            break;\n        } else {\n            arr.swap(store_index as usize, last_index as usize);\n        }\n    }\n    arr.swap(store_index as usize, pivot as usize);\n    store_index\n}\n")),(0,n.kt)(o.E,{src:"/img/quicksort-light.png",mdxType:"Image"},"FireDBG screenshot for an ",(0,n.kt)("a",{href:"https://github.com/SeaQL/FireDBG.Rust.Testbench/tree/main/quicksort"},"implementation of quicksort")),(0,n.kt)("p",null,"If you instantly get it, you can skip this section! If not, let's go through it step by step:"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},'"A call tree is all the state transitions of a program\'s call stack laid out on a 2D plane, organized in form of a tree"')),(0,n.kt)("p",null,"Every time a function call is made, we create a child node; when the function returns, we go back to the parent node. So subsequent function calls become sibling nodes."),(0,n.kt)(o.n,{src:"/img/calltree-light.mp4",mdxType:"Video"}),(0,n.kt)("p",null),(0,n.kt)("p",null,"At any given node, traversing up to the root node gives us a chain - which is the call stack.\nWe have two notations, ",(0,n.kt)("inlineCode",{parentName:"p"},"--\x3e--")," for function calls; ",(0,n.kt)("inlineCode",{parentName:"p"},"--<->--")," for function calls with return values.\nWe assign a unique frame ID to each node and this is the time sequence used in the timebar."),(0,n.kt)("h2",{id:"call-tree-visualization-and-algorithms"},"Call tree visualization and algorithms"),(0,n.kt)("p",null,"FireDBG is built around the call tree. You may ask, wouldn't this call tree become very large? Yes, that's why we spent enormous effort into linearizing everything. We developed a streaming file format to process the data in real time, and figured out a layout algorithm that can render infinite trees."),(0,n.kt)("p",null,"What's so interesting about call trees? Their shapes reveal a lot about the properties of algorithms. To illustrate, here's a side-by-side comparison of quicksort and mergesort, and we can see that quicksort yields a deeper tree than mergesort",(0,n.kt)("sup",{parentName:"p",id:"fnref-2-3c097c"},(0,n.kt)("a",{parentName:"sup",href:"#fn-2-3c097c",className:"footnote-ref"},"2")),". So quicksort is using more stack memory",(0,n.kt)("sup",{parentName:"p",id:"fnref-3-3c097c"},(0,n.kt)("a",{parentName:"sup",href:"#fn-3-3c097c",className:"footnote-ref"},"3"))," than mergesort, which makes sense because mergesort uses some memory on the heap!"),(0,n.kt)("p",null,"Since both are binary trees, they are not tail-call optimizable. And since both algorithms claim to be of ",(0,n.kt)("inlineCode",{parentName:"p"},"O(n log n)"),", statistically only one of the two branches should grow deeper. There are a lot more to observe and I have been drawing this on paper by hand for many years."),(0,n.kt)(o.E,{src:"/img/quicksort-vs-mergesort-light.png",mdxType:"Image"},"Comparing ",(0,n.kt)("a",{href:"https://github.com/SeaQL/FireDBG.Rust.Testbench/tree/main/quicksort"},"quicksort")," and ",(0,n.kt)("a",{href:"https://github.com/SeaQL/FireDBG.Rust.Testbench/tree/main/mergesort"},"mergesort")," side by side with the same input"),(0,n.kt)("h2",{id:"tracing-errors---the-error-path"},"Tracing errors - the error path"),(0,n.kt)("p",null,"This might be a Rust specific problem: Rust don't have exceptions. Instead, Rust uses a ",(0,n.kt)("inlineCode",{parentName:"p"},"Result")," system coupled with the ergonmic ",(0,n.kt)("inlineCode",{parentName:"p"},"?")," operator to effectively signal and handle errors. This has both pros and cons - the good thing is that errors propagate back to the parent along the exact same path the function is being called, which is deterministic and predictable. The bad thing is, when you finally ",(0,n.kt)("inlineCode",{parentName:"p"},"unwrap")," an error and decide to panic, the context of the error has long been lost."),(0,n.kt)("p",null,"This echos our second question: where do my errors come from? Consider the following toy program, where we get to roll some dice and each time we could be rolling one, two or three dice. Once in a while, throwing a die can cause an error. This is deliberately randomized, so there is no way to statically analyze where the error might come from - such is life!"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"fn roll(i: i32) -> Result<(), ()> {\n    let (a, b, c) = (dice(i), dice(i), dice(i)); a?; b?; c?;\n    if fire::dbg!(fastrand::u32(0..4)) == 0 {\n        roll(i - 1)\n    } else {\n        throw(i - 1)\n    }\n}\n\nfn throw(i: i32) -> Result<(), ()> {\n    match fire::dbg!(fastrand::i32(1..=3)) {\n        1 => { let a = dice(i); a?; }\n        2 => { let (a, b) = (dice(i), dice(i)); a?; b?; }\n        3 => { let (a, b, c) = (dice(i), dice(i), dice(i)); a?; b?; c?; }\n        _ => unreachable!(),\n    }\n    if fire::dbg!(fastrand::bool()) {\n        roll(i - 1)\n    } else {\n        throw(i - 1)\n    }\n}\n\nfn dice(i: i32) -> Result<(), ()> {\n    if fire::dbg!(fastrand::i32(0..i)) == 0 { Err(()) } else { Ok(()) }\n}\n\nfn main() {\n    roll(25).unwrap();\n}\n")),(0,n.kt)("p",null,"FireDBG captures all functions' return values and so is able to locate where the error originated from and how it propagated up! Here is the rendered call tree of this ",(0,n.kt)("inlineCode",{parentName:"p"},"roll_dice")," program, where FireDBG is able to highlight the error path up until the point of panic, which is conveniently marked by ",(0,n.kt)("inlineCode",{parentName:"p"},"!"),":"),(0,n.kt)(o.E,{src:"/img/roll_dice-light.png",mdxType:"Image"},"A screenshot of the ",(0,n.kt)("a",{href:"https://github.com/SeaQL/FireDBG.Rust.Testbench/tree/main/roll_dice"},(0,n.kt)("code",null,"roll_dice"))," call tree"),(0,n.kt)("h2",{id:"collecting-parameters-and-return-values"},"Collecting parameters and return values"),(0,n.kt)("p",null,"As you have seen in the above screenshots, FireDBG captures all functions' parameters and return values. Capturing parameters is the easy part, because it's a basic feature of any debuggers",(0,n.kt)("sup",{parentName:"p",id:"fnref-4-3c097c"},(0,n.kt)("a",{parentName:"sup",href:"#fn-4-3c097c",className:"footnote-ref"},"4")),". But capturing return values is a little intricate. The current implementation is: we set a breakpoint at every ",(0,n.kt)("inlineCode",{parentName:"p"},"ret")," instruction and capture the return value at that ",(0,n.kt)("em",{parentName:"p"},"particular")," point in time. The next instruction will immediately jump back to the parent function, which may overwrite the value."),(0,n.kt)("p",null,"Let's talk about ABI. There are different call conventions and Rust is particularly flexible in whether a value is returned via stack or register. In some cases complex data can be packed into one register, because Rust can return complex types like tuples and unions",(0,n.kt)("sup",{parentName:"p",id:"fnref-5-3c097c"},(0,n.kt)("a",{parentName:"sup",href:"#fn-5-3c097c",className:"footnote-ref"},"5")),". We tried super hard, but return value capture is still a hit-or-miss, but some visibility is better than no visibility!"),(0,n.kt)(o.E,{src:"/img/quicksort-partition-light.png",mdxType:"Image"},"Inspecting the parameters and return value of the ",(0,n.kt)("code",null,"partition")," function"),(0,n.kt)("h2",{id:"a-type-system-for-the-rust-type-system"},"A type system for the Rust type system"),(0,n.kt)("p",null,"We rely on lldb's awesome ",(0,n.kt)("inlineCode",{parentName:"p"},"SBType")," API to parse Rust's debug symbols, and capture variables' values in binary forms - not all things are printable, in particular, pointers (references) and containers. We have to reference the memory locations to get their values. This becomes non-trivial if the references form a diamond or worse, cycles",(0,n.kt)("sup",{parentName:"p",id:"fnref-6-3c097c"},(0,n.kt)("a",{parentName:"sup",href:"#fn-6-3c097c",className:"footnote-ref"},"6")),"."),(0,n.kt)("p",null,"For pointers, our brilliant intern",(0,n.kt)("sup",{parentName:"p",id:"fnref-7-3c097c"},(0,n.kt)("a",{parentName:"sup",href:"#fn-7-3c097c",className:"footnote-ref"},"7"))," has a great idea - capture and store the pointees as context for each variable and dereference those pointers on replay. Each memory address will only be serialized once, but can be copied many times on deserialization."),(0,n.kt)("p",null,"As such, we were able to construct a type system that can ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/protocol/src/value.rs"},"represent Rust values"),", which are serialized as binary data. We can then visualize them beautifully!"),(0,n.kt)(o.E,{src:"/img/car-light.png",mdxType:"Image"},"The ",(0,n.kt)("a",{href:"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/debugger/testcases/object.rs"},(0,n.kt)("code",null,"Car")," data structure")," with visualization; left panel: Rust definition"),(0,n.kt)("p",null,"For containers, it is more murky. For vectors, we can simply read a blob of memory from the heap, because the items are contiguous. But ... how about hash maps? Luckily, in Rust, the standard library's hashmap is a ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/rust-lang/hashbrown"},"flat hashmap"),", which means items are densely packed, although not contiguous. So with some ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/tyt2y3/frozen-hashbrown"},"memory fiddling"),", we are able to capture the contents of hashmaps!"),(0,n.kt)("p",null,"Note that in the screenshot below, the hash key is ",(0,n.kt)("inlineCode",{parentName:"p"},"&str"),", which means after extracting the hash keys from the hash map, we have to dereference the pointers to retrieve the string content."),(0,n.kt)(o.E,{src:"/img/hashmap-light.png",mdxType:"Image"},"Left panel: captured hashmap; middle panel: rendered hashmap; right panel: raw representation of a hashmap"),(0,n.kt)("h2",{id:"a-new-lens-into-our-code"},"A new lens into our code"),(0,n.kt)("p",null,"Visualization is a new lens into our code. Above are just a few simple examples, and FireDBG opens the door to domain-specific visualizations that are meaningful to us. Below are a few more examples:"),(0,n.kt)(o.E,{src:"/img/sudoku-light.png",mdxType:"Image"},"A ",(0,n.kt)("a",{href:"https://github.com/SeaQL/FireDBG.Rust.Testbench/tree/main/sudoku"},"Sudoku solver")),(0,n.kt)(o.E,{src:"/img/tokenizer-light.png",mdxType:"Image"},"A ",(0,n.kt)("a",{href:"https://github.com/SeaQL/sea-query/blob/master/src/token.rs"},"SQL tokenizer")),(0,n.kt)(o.E,{src:"/img/bubble-code-light.png",mdxType:"Image"},"My personal favourite - ",(0,n.kt)("a",{href:"https://github.com/SeaQL/FireDBG.Rust.Testbench/tree/main/bubble-code"},"symbolic recognition")),(0,n.kt)("h2",{id:"i-want-to-debug-my-code---not-system-libraries"},"I want to debug ",(0,n.kt)("em",{parentName:"h2"},"my code")," - not system libraries!"),(0,n.kt)("p",null,"We tried our best to boost the signal-to-noise ratio. Instead of ",(0,n.kt)("inlineCode",{parentName:"p"},"alloc::sync::Arc { core::ptr::non_null::NonNull { alloc::sync::ArcInner { strong: core::sync::atomic::AtomicUsize { .. }, weak: core::sync::atomic::AtomicUsize { .. }, data: pointer::Object { .. } } } }"),", we try to prettify standard library types like ",(0,n.kt)("inlineCode",{parentName:"p"},"Arc")," as ",(0,n.kt)("inlineCode",{parentName:"p"},"RefCounted { strong: 1usize, weak: 1usize, value: pointer::Object { .. } }"),"."),(0,n.kt)("p",null,"FireDBG only traces user code - not standard library, not vendor libraries - only the code inside the specific crate you are currently programming. Which means the call tree will only contain functions you wrote. No implementation details like ",(0,n.kt)("inlineCode",{parentName:"p"},"<I as alloc::vec::in_place_collect::SpecInPlaceCollect<T,I>>::collect_in_place"),"."),(0,n.kt)("p",null,"Which also means that the overhead of program tracing is confined - even with a very complex program, the subset of user code that we want to trace would only be a fraction of the program binary."),(0,n.kt)("h2",{id:"multi-threaded-programming-"},"Multi-threaded programming \ud83c\udfac"),(0,n.kt)(o.n,{src:"/img/timeline-mac-light.mp4",mdxType:"Video"}),(0,n.kt)("p",null,"Rust's slogan is \"Fearless Concurrency\", so how do we debug multi-threaded Rust programs? It's possible to pause and step through a multi-threaded program, but doing so manually would affect the timing and synchronization of other threads."),(0,n.kt)("p",null,"FireDBG can track multiple threads and keep them running as smoothly as possible, allowing us to observe how multiple threads work together. It's a proof-of-concept, but let's take a look at a small Rust program that spawns multiple worker threads to perform matrix computation:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'fn inverse(m: &Matrix<D, D>) -> Option<Matrix<D, D>> {\n    fire::dbg!("return", Matrix::inv(m))\n}\n\nfn runner(receiver: Receiver<Matrix<D, D>>, sender: Sender<(Matrix<D, D>, Option<Matrix<D, D>>)>) {\n    while let Ok(m) = receiver.recv() {\n        // send back the input with solution\n        let mm = inverse(&m);\n        sender.send((m, mm)).unwrap();\n    }\n}\n\nfn main() {\n    let (result, collector) = channel();\n    let mut senders = Vec::new();\n    for _ in 0..THREADS {\n        // spawn worker threads\n        let (sender, receiver) = channel();\n        senders.push(sender);\n        let result = result.clone();\n        std::thread::spawn(move || runner(receiver, result));\n    }\n\n    for c in 0..ITEMS {\n        // spmc; fan out\n        let m = Matrix::<D, D>::random();\n        senders[c % THREADS].send(m).unwrap();\n    }\n\n    for _ in 0..ITEMS {\n        // mpsc; consolidate\n        let (m, mm) = collector.recv().unwrap();\n        println!("Source  = {m:?}");\n        println!("Inverse = {mm:?}");\n    }\n}\n')),(0,n.kt)(o.E,{src:"/img/multi-thread-light.png",mdxType:"Image"},"Top panel: a matrix and its inverse computed by a worker thread; bottom panel: timeline showing events across all threads within a specific time window"),(0,n.kt)("h2",{id:"the-vision"},"The vision"),(0,n.kt)("p",null,"What you see today is an MVP of FireDBG. It may be slow and buggy, and notably, async Rust support is still a work-in-progress. But it outlines the vision I have for what a debugger could be and how it can level up our debugging experience. I still have a dozen of visualization ideas: channels, mutexes, arc/rc graph, async timeline, etc."),(0,n.kt)("p",null,"We aim to bring FireDBG to other programming languages and engineering domains. Our ultimate goal is to improve the debugging experience for all developers!"),(0,n.kt)("h2",{id:"lets-work-together"},"Let's work together!"),(0,n.kt)("h3",{id:"call-for-stargazers"},"Call for stargazers"),(0,n.kt)("p",null,"Please star our ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/FireDBG.for.Rust"},"GitHub repo"),"! Your support is vital. Even if you are not a Rust developer, let us know your thoughts too."),(0,n.kt)("h3",{id:"call-for-early-adopters"},"Call for early adopters"),(0,n.kt)("p",null,"If you think your use case can be drastically improved by having a visual debugger, let's collaborate and shape the product together",(0,n.kt)("sup",{parentName:"p",id:"fnref-8-3c097c"},(0,n.kt)("a",{parentName:"sup",href:"#fn-8-3c097c",className:"footnote-ref"},"8")),"."),(0,n.kt)("h3",{id:"call-for-co-founder"},"Call for co-founder"),(0,n.kt)("p",null,"I am looking for a co-founder. If you are like me, deeply passionate about developer experience and willing to commit to this idea, let's team up and embark on a journey to transform software engineering. You can find my profile on ",(0,n.kt)("a",{parentName:"p",href:"https://www.startupschool.org/cofounder-matching/candidate/hy22iDvPx"},"YC Co-Founder Matching"),(0,n.kt)("sup",{parentName:"p",id:"fnref-9-3c097c"},(0,n.kt)("a",{parentName:"sup",href:"#fn-9-3c097c",className:"footnote-ref"},"9")),"."),(0,n.kt)("h2",{id:"acknowledgement"},"Acknowledgement"),(0,n.kt)("p",null,"Many great software inspired me, but two of them is worth mentioning: ",(0,n.kt)("a",{parentName:"p",href:"https://getfirebug.com/index.html"},"Firebug")," and ",(0,n.kt)("a",{parentName:"p",href:"https://www.brendangregg.com/flamegraphs.html"},"Flame Graph"),". Firebug changed web development forever, and is the predecessor to the awesome browser developer tools we enjoy today."),(0,n.kt)("p",null,"Flame Graph is the classic example of how a simple but powerful idea became ubiquitous, and it really demonstrates the magic of visualization. Good visualization enlightens our brains."),(0,n.kt)("p",null,"A huge thanks to the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/vadimcn/codelldb"},"CodeLLDB")," project, which powers FireDBG's lldb driver. In case you're wondering, FireDBG uses both ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm"},"SeaORM")," and ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-streamer"},"SeaStreamer")," under the hood. And of course none of this could be possible without the Rust programming language and the awesome Rust community!"),(0,n.kt)("div",{className:"footnotes"},(0,n.kt)("hr",{parentName:"div"}),(0,n.kt)("ol",{parentName:"div"},(0,n.kt)("li",{parentName:"ol",id:"fn-1-3c097c"},(0,n.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/windows-hardware/drivers/debuggercmds/windbg-overview"},"WinDBG"),", ",(0,n.kt)("a",{parentName:"li",href:"https://rr-project.org/"},"rr"),(0,n.kt)("a",{parentName:"li",href:"#fnref-1-3c097c",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-2-3c097c"},"Probably because of bad pivot selection",(0,n.kt)("a",{parentName:"li",href:"#fnref-2-3c097c",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-3-3c097c"},"A deep call stack could harm performance or at least pose a risk of overflow",(0,n.kt)("a",{parentName:"li",href:"#fnref-3-3c097c",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-4-3c097c"},"Except not really, in some cases the function prologue is wrong",(0,n.kt)("a",{parentName:"li",href:"#fnref-4-3c097c",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-5-3c097c"},"A future blog post will be published to explain the intricacies",(0,n.kt)("a",{parentName:"li",href:"#fnref-5-3c097c",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-6-3c097c"},"Although normal, safe Rust programs should not have reference cycles",(0,n.kt)("a",{parentName:"li",href:"#fnref-6-3c097c",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-7-3c097c"},"Who would rather not be named",(0,n.kt)("a",{parentName:"li",href:"#fnref-7-3c097c",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-8-3c097c"},"Feel free to reach us via GitHub or email",(0,n.kt)("a",{parentName:"li",href:"#fnref-8-3c097c",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-9-3c097c"},"Please do not DM me; let's connect on the platform",(0,n.kt)("a",{parentName:"li",href:"#fnref-9-3c097c",className:"footnote-backref"},"\u21a9")))))}m.isMDXComponent=!0}}]);