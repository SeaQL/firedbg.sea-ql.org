"use strict";(self.webpackChunkfiredbg=self.webpackChunkfiredbg||[]).push([[871],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,c=p["".concat(s,".").concat(m)]||p[m]||g[m]||i;return n?a.createElement(c,l(l({ref:t},d),{},{components:n})):a.createElement(c,l({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7236:(e,t,n)=>{n.d(t,{E:()=>r});var a=n(7294);function r(e){const t=e.src.replace("-dark","-light"),n=e.src.replace("-light","-dark"),r=()=>a.createElement(a.Fragment,null,a.createElement("img",{style:{width:"100%"},src:`${t}#light`}),a.createElement("img",{style:{width:"100%"},src:`${n}#dark`}));return void 0===e.children?r():a.createElement("table",null,a.createElement("tbody",null,a.createElement("tr",{style:{backgroundColor:"unset"}},a.createElement("td",null,r())),a.createElement("tr",{style:{backgroundColor:"unset"}},a.createElement("td",{style:{color:"var(--ifm-blockquote-color)"}},e.children))))}},9335:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),i=n(7236);const l={slug:"2023-12-13-getting-started",title:"Getting Started",author:"Billy Chan",author_title:"FireDBG Team",author_url:"https://github.com/billy1624",author_image_url:"https://avatars.githubusercontent.com/u/30400950?v=4",image:"https://firedbg.sea-ql.org/img/bubble-code-dark.png",tags:["news"]},o=void 0,s={permalink:"/blog/2023-12-13-getting-started",editUrl:"https://github.com/SeaQL/firedbg.sea-ql.org/edit/main/FireDBG/blog/blog/2023-12-13-getting-started.mdx",source:"@site/blog/2023-12-13-getting-started.mdx",title:"Getting Started",description:'In this blog post, we will cover the basic usage of FireDBG VS Code Extension ("the Extension") and FireDBG CLI ("the CLI"). By the end of this tutorial, you will learn:',date:"2023-12-13T00:00:00.000Z",formattedDate:"December 13, 2023",tags:[{label:"news",permalink:"/blog/tags/news"}],readingTime:14,hasTruncateMarker:!1,authors:[{name:"Billy Chan",title:"FireDBG Team",url:"https://github.com/billy1624",imageURL:"https://avatars.githubusercontent.com/u/30400950?v=4"}],frontMatter:{slug:"2023-12-13-getting-started",title:"Getting Started",author:"Billy Chan",author_title:"FireDBG Team",author_url:"https://github.com/billy1624",author_image_url:"https://avatars.githubusercontent.com/u/30400950?v=4",image:"https://firedbg.sea-ql.org/img/bubble-code-dark.png",tags:["news"]}},u={authorsImageUrls:[void 0]},d=[{value:"Installation",id:"installation",level:2},{value:"FireDBG VS Code Extension",id:"firedbg-vs-code-extension",level:3},{value:"FireDBG Binaries",id:"firedbg-binaries",level:3},{value:"GUI Tour",id:"gui-tour",level:2},{value:"Debug Targets and Runs",id:"debug-targets-and-runs",level:3},{value:"Visual Debugger",id:"visual-debugger",level:3},{value:"Controls",id:"controls",level:4},{value:"FireDBG Sidebar",id:"firedbg-sidebar",level:3},{value:"FireDBG CLI",id:"firedbg-cli",level:2},{value:"FireDBG Workspace",id:"firedbg-workspace",level:2},{value:"Debugging Unit Tests",id:"debugging-unit-tests",level:3},{value:"<code>fire::dbg!</code> Trace Macro",id:"firedbg-trace-macro",level:3},{value:"Debugging Integration Tests",id:"debugging-integration-tests",level:3},{value:"Debugging Binary Targets",id:"debugging-binary-targets",level:3},{value:"Debugging Examples",id:"debugging-examples",level:3},{value:"<code>firedbg/</code> Output Folder",id:"firedbg-output-folder",level:3},{value:"<code>firedbg.toml</code> Config",id:"firedbgtoml-config",level:3},{value:"The Event Index",id:"the-event-index",level:2}],p={toc:d},g="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(g,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'In this blog post, we will cover the basic usage of FireDBG VS Code Extension ("the Extension") and FireDBG CLI ("the CLI"). By the end of this tutorial, you will learn:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"How to install the Extension and the CLI"),(0,r.kt)("li",{parentName:"ul"},"How to setup a Rust workspace for FireDBG debugger"),(0,r.kt)("li",{parentName:"ul"},"How to debug Rust binary, example, unit test and integration test with FireDBG debugger"),(0,r.kt)("li",{parentName:"ul"},"How to interpret and inspect visualized call tree, variables and timeline in the Extension"),(0,r.kt)("li",{parentName:"ul"},"How to interpret and inspect breakpoint events of multi-threaded program in the Extension"),(0,r.kt)("li",{parentName:"ul"},"How to trace any variable / expression of interest with the ",(0,r.kt)("inlineCode",{parentName:"li"},"fire::dbg!")," trace macro"),(0,r.kt)("li",{parentName:"ul"},"How to selectively enable / disable tracing of a local package"),(0,r.kt)("li",{parentName:"ul"},"How to use the CLI to operate FireDBG debugger and then interpret and inspect breakpoint events via SQLite")),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Before we start, make sure you have VS Code and Rust installed."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"VS Code (version 1.80.0 or later)"),(0,r.kt)("li",{parentName:"ul"},"Rust (version 1.74.0 or later)")),(0,r.kt)("h3",{id:"firedbg-vs-code-extension"},"FireDBG VS Code Extension"),(0,r.kt)("p",null,"The Extension provides seamless integration with FireDBG to enhance debugging experience and developer productivity.\nSearch and install the ",(0,r.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=SeaQL.firedbg-rust"},(0,r.kt)("inlineCode",{parentName:"a"},"SeaQL.firedbg-rust"))," extension.\nTo keep the ",(0,r.kt)("inlineCode",{parentName:"p"},".vsix")," package small in size, we dont't ship the platform-specific binaries with the Extension.\nInstead, we have a dedicated installer script for the FireDBG binaries."),(0,r.kt)("h3",{id:"firedbg-binaries"},"FireDBG Binaries"),(0,r.kt)("p",null,"Building FireDBG from source can be tricky, so we provided prebuilt binaries for the following CPU and OS combination:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"right"}),(0,r.kt)("th",{parentName:"tr",align:"center"},"Linux",(0,r.kt)("sup",{parentName:"th",id:"fnref-1-5dbf5e"},(0,r.kt)("a",{parentName:"sup",href:"#fn-1-5dbf5e",className:"footnote-ref"},"1"))),(0,r.kt)("th",{parentName:"tr",align:"center"},"macOS",(0,r.kt)("sup",{parentName:"th",id:"fnref-2-5dbf5e"},(0,r.kt)("a",{parentName:"sup",href:"#fn-2-5dbf5e",className:"footnote-ref"},"2"))),(0,r.kt)("th",{parentName:"tr",align:"center"},"Windows (WSL 2)",(0,r.kt)("sup",{parentName:"th",id:"fnref-3-5dbf5e"},(0,r.kt)("a",{parentName:"sup",href:"#fn-3-5dbf5e",className:"footnote-ref"},"3"))))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"x64"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"arm64"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u26d4\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u26d4\ufe0f")))),(0,r.kt)("p",null,'Once the the Extension has been installed, you should see a prompt hinting that FireDBG binaries are missing. Click on the "install" button to run the installer.'),(0,r.kt)(i.E,{src:"/img/gt-install-firedbg-light.png",mdxType:"Image"}),(0,r.kt)("p",null,"Or, you can run the installer manually."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl https://raw.githubusercontent.com/SeaQL/FireDBG.for.Rust/main/install.sh -sSf | sh\n")),(0,r.kt)("p",null,"FireDBG binaries will be installed in ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.cargo/bin")," and a debugger self test will be conducted to verify the installation."),(0,r.kt)("p",null,"In case you got error messages when performing self test, read ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/Troubleshooting.md"},"Troubleshooting Guide")," for the solution of common errors."),(0,r.kt)("h2",{id:"gui-tour"},"GUI Tour"),(0,r.kt)("p",null,"Download the ",(0,r.kt)("a",{parentName:"p",href:"https://codeload.github.com/SeaQL/FireDBG.Rust.Testbench/zip/refs/heads/main"},"zipped source code"),", or cloning ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/FireDBG.Rust.Testbench"},"Rust Testbench for FireDBG")," to your local machine, then follow the tour below to learn the basic usage of the Extension."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"git clone git@github.com:SeaQL/FireDBG.Rust.Testbench.git\n")),(0,r.kt)("p",null,"Note that the root directory of testbench isn't a Cargo workspace. In the following sections, please open each sub-folder (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"getting-started"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"roll_dice"),"...) in VS Code."),(0,r.kt)("h3",{id:"debug-targets-and-runs"},"Debug Targets and Runs"),(0,r.kt)("p",null,"Where can I see the list of all debuggable Rust targets, how can I debug it and how to inspect previous runs?"),(0,r.kt)(i.E,{src:"/img/gt-debug-and-run-light.png",mdxType:"Image"}),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'Click on the "Run and Debug" panel on your primary sidebar, you should see two new panels on the bottom'),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"FIREDBG")," panel should display all binaries, examples, integration tests and unit tests in your current Rust workspace. Click on the list item to reveal the Rust source code. To debug it, hover the list item and click on the play icon \u25b6\ufe0f on the list item. A new debug view will be shown and tail the progress in real time. "),(0,r.kt)("li",{parentName:"ol"},"All previous debug runs can be found in the ",(0,r.kt)("inlineCode",{parentName:"li"},"FIREDBG RUNS")," panel, simply click on it to reveal.")),(0,r.kt)("p",null,"Alternatively, you can list all debuggable Rust targets via the CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ firedbg list-target\n\nAvailable binaries are:\n    roll_dice\n")),(0,r.kt)("p",null,"And, list all previous runs via the CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ firedbg list-run\n\nAvailable `firedbg` runs are:\n    1) roll_dice-1701678002235.firedbg.ss\n")),(0,r.kt)("h3",{id:"visual-debugger"},"Visual Debugger"),(0,r.kt)("p",null,"How to interpret and inspect visualized call tree, variables, timeline and threads in the Extension?"),(0,r.kt)(i.E,{src:"/img/gt-vis-debugger-light.png",mdxType:"Image"}),(0,r.kt)("p",null,"We can the open the debug view by clicking the items in the ",(0,r.kt)("inlineCode",{parentName:"p"},"FIREDBG RUNS")," panel, or with the ",(0,r.kt)("inlineCode",{parentName:"p"},"open")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"firedbg open\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Each node represent a function call; the depth of each node resemble the depth of the function call in the call stack; There are two types of edge:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Function call with return value: ",(0,r.kt)("inlineCode",{parentName:"li"},"-<->-")),(0,r.kt)("li",{parentName:"ul"},"Function call only: ",(0,r.kt)("inlineCode",{parentName:"li"},"--\x3e--")))),(0,r.kt)("li",{parentName:"ol"},"If the program exited with a panic, the panicking function will be highlighted in red with an exclamation mark."),(0,r.kt)("li",{parentName:"ol"},"Click on the function name on the call tree node to reveal the Rust source code."),(0,r.kt)("li",{parentName:"ol"},"Function Arguments: the name of the argument is shown as the label. The faded text on the bounding box denote the type name, where hovering on it will reveal the fully-qualified name. The actual value is enclosed in the bounding box."),(0,r.kt)("li",{parentName:"ol"},"Function Return Value: the return value will be shown on the far right with the label ",(0,r.kt)("inlineCode",{parentName:"li"},"return"),"."),(0,r.kt)("li",{parentName:"ol"},"Timeline: toggle the timline by checking the timeline checkbox on the bottom. There are two kinds of node:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Circle: function call"),(0,r.kt)("li",{parentName:"ul"},"Square: function return"))),(0,r.kt)("li",{parentName:"ol"},"Thread selector: If the program has more than one thread, a dropdown will be shown on the bottom. You can switch to inspect the execution of other threads. Bring up the timeline to view the execution of all threads in a single view.")),(0,r.kt)("h4",{id:"controls"},"Controls"),(0,r.kt)("p",null,"How to time travel debug and how to navigate and zoom through the program execution flow?"),(0,r.kt)(i.E,{src:"/img/gt-vis-debugger-control-light.png",mdxType:"Image"}),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Use the control buttons on the timebar to jump to the beginning or the end of program execution. Use ",(0,r.kt)("inlineCode",{parentName:"li"},"J/K")," on your keyboard or stepping button to step backward and forward. Click on the timebar would jump to the exact function call."),(0,r.kt)("li",{parentName:"ol"},"The visualization will be updated as you traverse the call tree. Use ",(0,r.kt)("inlineCode",{parentName:"li"},"W/A/S/D")," keys on your keyboard or your left mouse click to pan; Click the ",(0,r.kt)("inlineCode",{parentName:"li"},"+/-")," buttons on the bottom right or ",(0,r.kt)("inlineCode",{parentName:"li"},"-/=")," on your keyboard or use your mouse scroll wheel to zoom. To resize the panel, move the mouse to the panel edge then drag to resize.")),(0,r.kt)("h3",{id:"firedbg-sidebar"},"FireDBG Sidebar"),(0,r.kt)("p",null,"How to retrieve the detailed debug info?"),(0,r.kt)(i.E,{src:"/img/gt-sidebar-light.png",mdxType:"Image"}),(0,r.kt)("p",null,"The FireDBG sidebar contains all debug info. It will be updated as you traverse the call tree."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Debugger Info"),": FireDBG debugger info, program executable info and runtime info"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Frame Info"),": frame metadata of the inspected function call"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Parameters"),": Rust-like representation of the inspected function call's arguments"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Return Value"),": Rust-like representation of the inspected function's return value"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Call Stack (Ancestors)"),": ancestors of the inspected function; up until root"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Callee (Children)"),": immediate children of the inspected function")),(0,r.kt)("h2",{id:"firedbg-cli"},"FireDBG CLI"),(0,r.kt)("p",null,"There are two ways to tell ",(0,r.kt)("inlineCode",{parentName:"p"},"firedbg")," where is the root directory of a cargo workspace:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"By default, the current directory will be the root directory of a cargo workspace"),(0,r.kt)("li",{parentName:"ol"},"Or, overriding it with ",(0,r.kt)("inlineCode",{parentName:"li"},"--workspace-root")," option, i.e. ",(0,r.kt)("inlineCode",{parentName:"li"},"firedbg --workspace-root <WORKSPACE-ROOT>"))),(0,r.kt)("p",null,"Some common sub-commands include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cache"),": Parse all ",(0,r.kt)("inlineCode",{parentName:"li"},".rs")," source files in the current workspace"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"clean"),": Cleanup the ",(0,r.kt)("inlineCode",{parentName:"li"},"firedbg/")," folder"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list-target"),": List all runnable targets"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"run"),": Run a binary target with debugging enabled"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"example"),": Run an example with debugging enabled"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"test"),": Run an integrated test with debugging enabled"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unit-test"),": Run a unit test with debugging enabled"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"index"),": Run indexer on the latest run and save it as a ",(0,r.kt)("inlineCode",{parentName:"li"},".sqlite")," db file"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list-run"),": List all ",(0,r.kt)("inlineCode",{parentName:"li"},"firedbg")," runs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"open"),": Open debugger view in VS Code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"help"),": Print help message or the help of the given subcommand(s)")),(0,r.kt)("p",null,"You can get the help messages by appending the ",(0,r.kt)("inlineCode",{parentName:"p"},"--help")," flag."),(0,r.kt)("h2",{id:"firedbg-workspace"},"FireDBG Workspace"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html"},"Cargo workspace")," is a set of crates sharing the same ",(0,r.kt)("inlineCode",{parentName:"p"},"Cargo.lock")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," directory.\nFireDBG rely on Cargo to locate source files and target for debugging."),(0,r.kt)("p",null,"Now you have a basic understanding on the usage of FireDBG.\nLet's create a Cargo workspace and practice debugging with FireDBG!"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/FireDBG.Rust.Testbench/tree/main/getting-started"},"Full source code")," is available on our testbench."),(0,r.kt)(i.E,{src:"/img/gt-workspace-light.png",mdxType:"Image"}),(0,r.kt)("p",null,"Start by creating a ",(0,r.kt)("inlineCode",{parentName:"p"},"getting-started")," workspace."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ mkdir getting-started\n$ cd getting-started\n")),(0,r.kt)("p",null,"For now, we only have a single ",(0,r.kt)("inlineCode",{parentName:"p"},"quicksort")," package in this workspace. We will add one more crate later."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="Cargo.toml"',title:'"Cargo.toml"'},'[workspace]\nmembers = ["quicksort"]\n')),(0,r.kt)("p",null,"To create the ",(0,r.kt)("inlineCode",{parentName:"p"},"quicksort")," library, we can use the convenient ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo")," command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ cargo new --lib quicksort\n$ cd quicksort\n")),(0,r.kt)("h3",{id:"debugging-unit-tests"},"Debugging Unit Tests"),(0,r.kt)("p",null,"Replace the content of ",(0,r.kt)("inlineCode",{parentName:"p"},"lib.rs"),' with our "faulty" quick sort library code.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="quicksort/src/lib.rs"',title:'"quicksort/src/lib.rs"'},"pub fn run<T: PartialOrd>(arr: &mut [T]) {\n    let len = arr.len();\n    quick_sort(arr, 0, (len - 1) as isize);\n}\n\nfn quick_sort<T: PartialOrd>(arr: &mut [T], low: isize, high: isize) {\n    if low < high {\n        let p = partition(arr, low, high);\n        quick_sort(arr, low, p - 1);\n        quick_sort(arr, p + 1, high);\n    }\n}\n\nfn partition<T: PartialOrd>(arr: &mut [T], low: isize, high: isize) -> isize {\n    let pivot = high as usize;\n    let mut store_index = low; // Shouldn't this be `low - 1`?\n    let mut last_index = high;\n\n    loop {\n        store_index += 1;\n        while arr[store_index as usize] < arr[pivot] {\n            store_index += 1;\n        }\n        last_index -= 1;\n        while last_index >= 0 && arr[last_index as usize] > arr[pivot] {\n            last_index -= 1;\n        }\n        if store_index >= last_index {\n            break;\n        } else {\n            arr.swap(store_index as usize, last_index as usize);\n        }\n    }\n    arr.swap(store_index as usize, pivot as usize);\n    store_index\n}\n")),(0,r.kt)("p",null,"Then add some unit tests to the end of ",(0,r.kt)("inlineCode",{parentName:"p"},"lib.rs")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="quicksort/src/lib.rs"',title:'"quicksort/src/lib.rs"'},"#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_quicksort_1() {\n        let mut numbers = [4, 65, 2, -31, 0, 99, 2, 83, 782, 1];\n        run(&mut numbers);\n        assert_eq!(numbers, [-31, 0, 1, 2, 2, 4, 65, 83, 99, 782]);\n    }\n\n    #[test]\n    fn test_quicksort_2() {\n        let mut numbers = [1, 2, 2];\n        run(&mut numbers);\n        assert_eq!(numbers, [1, 2, 2]);\n    }\n}\n")),(0,r.kt)("p",null,"Click on the debug icon on the left to start debugging the unit test.\nWe found that it's quite hard to inspect what elements are swapped in each partition."),(0,r.kt)(i.E,{src:"/img/gt-unit-test-light.png",mdxType:"Image"}),(0,r.kt)("p",null,"To help debugging, we can add a ",(0,r.kt)("inlineCode",{parentName:"p"},"swap")," function and rewrite the original code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"fn partition<T: PartialOrd>(arr: &mut [T], low: isize, high: isize) -> isize {\n    let pivot = high as usize;\n    let mut store_index = low - 1;\n    let mut last_index = high;\n\n    loop {\n        store_index += 1;\n        while arr[store_index as usize] < arr[pivot] {\n            store_index += 1;\n        }\n        last_index -= 1;\n        while last_index >= 0 && arr[last_index as usize] > arr[pivot] {\n            last_index -= 1;\n        }\n        if store_index >= last_index {\n            break;\n        } else {\n-           arr.swap(store_index as usize, last_index as usize);\n+           swap(&mut arr[store_index as usize..=last_index as usize]);\n        }\n    }\n-   arr.swap(store_index as usize, pivot as usize);\n+   swap(&mut arr[store_index as usize..=pivot as usize]);\n    store_index\n}\n\n+ fn swap<T: PartialOrd>(arr: &mut [T]) {\n+     arr.swap(0, arr.len() - 1);\n+ }\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Tip: you can add ",(0,r.kt)("inlineCode",{parentName:"p"},"#[cfg_attr(not(debug_assertions), inline)]")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"swap")," function to inline it in release build, so that it will not incur any overhead.")),(0,r.kt)("p",null,"Now, we can easily see the ",(0,r.kt)("inlineCode",{parentName:"p"},"swap")," and what has been swapped. Upon closer inspection we will see a pattern, i.e. the first element of each partition is always untouched. That's the bug!"),(0,r.kt)(i.E,{src:"/img/gt-unit-test-swap-light.png",mdxType:"Image"}),(0,r.kt)("p",null,"Alternatively, you can debug unit test via the CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"firedbg unit-test quicksort test::test_quicksort_1\n")),(0,r.kt)("h3",{id:"firedbg-trace-macro"},(0,r.kt)("inlineCode",{parentName:"h3"},"fire::dbg!")," Trace Macro"),(0,r.kt)("p",null,"Let's try to debug the same program with a different approach. An non-invasive approach, this time we only trace the swap without modifying the program structure."),(0,r.kt)("p",null,"FireDBG provide a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/firedbg-lib/latest/firedbg_lib/fire/macro.dbg.html"},(0,r.kt)("inlineCode",{parentName:"a"},"fire::dbg!"))," macro similar to ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/macro.dbg.html"},(0,r.kt)("inlineCode",{parentName:"a"},"std::dbg!"))," to capture the variable of interest."),(0,r.kt)("p",null,"We can trace the swap actions with the help of ",(0,r.kt)("inlineCode",{parentName:"p"},"fire::dbg!"),". The main advantage compared to ",(0,r.kt)("inlineCode",{parentName:"p"},"std::dbg!"),", is that the trace data is associated with the stack frame of the calling function."),(0,r.kt)("p",null,"Undo the previous change and go back to the original implementation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="Cargo.toml"',title:'"Cargo.toml"'},'[dependencies]\n+ firedbg-lib = "0.1"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'+ use firedbg_lib::fire;\n\nfn partition<T: PartialOrd>(arr: &mut [T], low: isize, high: isize) -> isize {\n    let pivot = high as usize;\n    let mut store_index = low - 1;\n    let mut last_index = high;\n\n    loop {\n        store_index += 1;\n        while arr[store_index as usize] < arr[pivot] {\n            store_index += 1;\n        }\n        last_index -= 1;\n        while last_index >= 0 && arr[last_index as usize] > arr[pivot] {\n            last_index -= 1;\n        }\n        if store_index >= last_index {\n            break;\n        } else {\n+           fire::dbg!("swap", &arr[store_index as usize..=last_index as usize]);\n            arr.swap(store_index as usize, last_index as usize);\n        }\n    }\n+   fire::dbg!("swap", &arr[store_index as usize..=pivot as usize]);\n    arr.swap(store_index as usize, pivot as usize);\n    store_index\n}\n')),(0,r.kt)("p",null,"This time the swap is shown in the variables of the partition function.\nAs expected, we see 3 swaps. This should help us to observe the pattern, locate and fix the bug."),(0,r.kt)(i.E,{src:"/img/gt-unit-test-dbg-light.png",mdxType:"Image"}),(0,r.kt)("h3",{id:"debugging-integration-tests"},"Debugging Integration Tests"),(0,r.kt)("p",null,"Similar to unit test, we can debug integration test with FireDBG. Let's add an integration test file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="quicksort/tests/bookshelf.rs"',title:'"quicksort/tests/bookshelf.rs"'},'#[test]\nfn test_quicksort_1() {\n    let mut books = [\n        "The Rust Programming Language",\n        "Beginning Rust: From Novice to Professional",\n        "Rust in Action",\n        "Programming Rust: Fast, Safe Systems Development",\n        "Rust Programming Language for Beginners",\n    ];\n    quicksort::run(&mut books);\n    assert_eq!(\n        books,\n        [\n            "Beginning Rust: From Novice to Professional",\n            "Programming Rust: Fast, Safe Systems Development",\n            "Rust Programming Language for Beginners",\n            "Rust in Action",\n            "The Rust Programming Language",\n        ]\n    );\n}\n')),(0,r.kt)(i.E,{src:"/img/gt-integration-test-light.png",mdxType:"Image"}),(0,r.kt)("p",null,"Alternatively, you can debug integration test via the CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"firedbg test bookshelf test_quicksort_1\n")),(0,r.kt)("h3",{id:"debugging-binary-targets"},"Debugging Binary Targets"),(0,r.kt)("p",null,"Let's create an executable program. We need to add some dependencies first."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="Cargo.toml"',title:'"Cargo.toml"'},'[dependencies]\nfiredbg-lib = "0.1"\n+ fastrand = "2"\n+ structopt = "0.3"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="quicksort/src/main.rs"',title:'"quicksort/src/main.rs"'},'use firedbg_lib::fire;\nuse std::iter::repeat_with;\nuse structopt::StructOpt;\n\n#[derive(StructOpt, Debug)]\nstruct Opt {\n    /// Random seed\n    #[structopt(long, default_value = "2525")]\n    seed: u64,\n    /// Number of random numbers to be sorted\n    #[structopt(default_value = "10")]\n    n: usize,\n}\n\nfn main() {\n    let Opt { seed, n } = Opt::from_args();\n\n    fire::dbg!(&seed);\n    fire::dbg!(&n);\n\n    fastrand::seed(seed);\n\n    let max = if n <= 10 { 100 } else { 1000 };\n\n    println!("Sort {n} numbers in ascending order");\n    let mut numbers: Vec<_> = repeat_with(|| fastrand::i32(1..max)).take(n).collect();\n\n    println!("Input:  {:?}", numbers);\n    quicksort::run(&mut numbers);\n    println!("Sorted: {:?}", numbers);\n\n    let mut c = 0;\n    for n in numbers {\n        assert!(n >= c);\n        c = n;\n    }\n}\n')),(0,r.kt)(i.E,{src:"/img/gt-binary-light.png",mdxType:"Image"}),(0,r.kt)("p",null,"We can use the FireDBG CLI to pass additional parameters to the Rust binary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# Randomly generate 18 numbers with the random seed 2828, then sort it in ascending order\nfiredbg run quicksort -- 18 --seed 2828\n")),(0,r.kt)("h3",{id:"debugging-examples"},"Debugging Examples"),(0,r.kt)("p",null,"Examples work the same as binary targets, just that they are located under the ",(0,r.kt)("inlineCode",{parentName:"p"},"examples/")," directory."),(0,r.kt)("p",null,"We can also debug example via the CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"firedbg example random100\n")),(0,r.kt)("h3",{id:"firedbg-output-folder"},(0,r.kt)("inlineCode",{parentName:"h3"},"firedbg/")," Output Folder"),(0,r.kt)(i.E,{src:"/img/gt-firedbg-folder-light.png",mdxType:"Image"}),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"firedbg")," folder will be created for storing the symbols, debug runs and other supporting files.\nYou should ignore this folder from your source control, i.e. add ",(0,r.kt)("inlineCode",{parentName:"p"},"firedbg/")," to ",(0,r.kt)("inlineCode",{parentName:"p"},".gitignore"),"."),(0,r.kt)("h3",{id:"firedbgtoml-config"},(0,r.kt)("inlineCode",{parentName:"h3"},"firedbg.toml")," Config"),(0,r.kt)("p",null,"Let's try and add one more crate to the workspace."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ cargo new --lib book-store\n$ cd book-store\n")),(0,r.kt)("p",null,"Update the ",(0,r.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," at workspace root, adding our new ",(0,r.kt)("inlineCode",{parentName:"p"},"book-store")," package."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="Cargo.toml"',title:'"Cargo.toml"'},'[workspace]\nmembers = ["quicksort", "book-store"]\n')),(0,r.kt)("p",null,"Below we have a simple function to list the inventory in alphabetical order."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="book-store/src/lib.rs"',title:'"book-store/src/lib.rs"'},"use anyhow::Result;\nuse std::fs::File;\nuse std::io::{BufRead, BufReader};\n\npub fn inventory(path: &str) -> Result<Vec<String>> {\n    let file = File::open(path)?;\n    let reader = BufReader::new(file);\n\n    let mut books = Vec::new();\n    for line in reader.lines() {\n        let book = line?.trim().to_owned();\n        books.push(book);\n    }\n    quicksort::run(&mut books);\n    Ok(books)\n}\n")),(0,r.kt)("p",null,"To put it in action we can add a ",(0,r.kt)("inlineCode",{parentName:"p"},"books.txt")," file to the package root and then write a unit test to invoke the ",(0,r.kt)("inlineCode",{parentName:"p"},"inventory")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-txt",metastring:'title="book-store/books.txt"',title:'"book-store/books.txt"'},"The Rust Programming Language\nRust Programming Language for Beginners\nProgramming Rust: Fast, Safe Systems Development\nBeginning Rust: From Novice to Professional\nRust in Action\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="book-store/src/lib.rs"',title:'"book-store/src/lib.rs"'},'#[cfg(test)]\nmod test {\n    use super::*;\n    use anyhow::Result;\n\n    #[test]\n    fn test_inventory_1() -> Result<()> {\n        let path = concat!(env!("CARGO_MANIFEST_DIR"), "/books.txt");\n        let books = inventory(path)?;\n        assert_eq!(\n            books,\n            [\n                "Beginning Rust: From Novice to Professional",\n                "Programming Rust: Fast, Safe Systems Development",\n                "Rust Programming Language for Beginners",\n                "Rust in Action",\n                "The Rust Programming Language",\n            ]\n        );\n        Ok(())\n    }\n}\n')),(0,r.kt)("p",null,"Umm... we see that function calls to the ",(0,r.kt)("inlineCode",{parentName:"p"},"quicksort")," crate are missing in the call tree."),(0,r.kt)(i.E,{src:"/img/gt-book-store-light.png",mdxType:"Image"}),(0,r.kt)("p",null,"By default FireDBG will only trace the functions of the debug target.\nIf you want to trace other crates in your local workspace, you will need to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"firedbg.toml")," config file in your workspace root."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="firedbg.toml"',title:'"firedbg.toml"'},'[workspace.members]\nquicksort = { trace = "full" } \n# Syntax: <PACKAGE> = { trace = "<full | none>" }\n')),(0,r.kt)("p",null,"Now, we can see the function calls of the ",(0,r.kt)("inlineCode",{parentName:"p"},"quicksort")," crate!"),(0,r.kt)(i.E,{src:"/img/gt-trace-config-light.png",mdxType:"Image"}),(0,r.kt)("h2",{id:"the-event-index"},"The Event Index"),(0,r.kt)("p",null,"When you open a ",(0,r.kt)("inlineCode",{parentName:"p"},".firedbg.ss")," file, FireDBG indexer will create a ",(0,r.kt)("inlineCode",{parentName:"p"},".sqlite")," file to store the analyzed debug info.\nYou can also run the indexer manually with the ",(0,r.kt)("inlineCode",{parentName:"p"},"firedbg index")," sub-command."),(0,r.kt)(i.E,{src:"/img/gt-sqlite-light.png",mdxType:"Image"}),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-3-5dbf5e"},"Supported Windows (WSL 2) distributions: Ubuntu 22.04, Ubuntu 20.04",(0,r.kt)("a",{parentName:"li",href:"#fnref-3-5dbf5e",className:"footnote-backref"},"\u21a9")),(0,r.kt)("li",{parentName:"ol",id:"fn-2-5dbf5e"},"Supported macOS versions: macOS 13 (Ventura), macOS 14 (Sonoma)",(0,r.kt)("a",{parentName:"li",href:"#fnref-2-5dbf5e",className:"footnote-backref"},"\u21a9")),(0,r.kt)("li",{parentName:"ol",id:"fn-1-5dbf5e"},"Supported Linux distributions: Ubuntu 22.04, Ubuntu 20.04, Debian 12, Fedora 39",(0,r.kt)("a",{parentName:"li",href:"#fnref-1-5dbf5e",className:"footnote-backref"},"\u21a9")))))}m.isMDXComponent=!0}}]);