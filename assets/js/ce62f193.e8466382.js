"use strict";(self.webpackChunkfiredbg=self.webpackChunkfiredbg||[]).push([[635],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(a),m=n,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return a?r.createElement(h,o(o({ref:t},d),{},{components:a})):r.createElement(h,o({ref:t},d))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7236:(e,t,a)=>{a.d(t,{E:()=>i,n:()=>n});var r=a(7294);function n(e){let{src:t}=e;const a=t.replace("-dark","-light"),n=t.replace("-light","-dark");return r.createElement(r.Fragment,null,r.createElement("video",{controls:!0,muted:!0,autoPlay:!0,loop:!0,style:{width:"100%"},"data-theme":"light"},r.createElement("source",{src:a,type:"video/mp4"})),r.createElement("video",{controls:!0,muted:!0,autoPlay:!0,loop:!0,style:{width:"100%"},"data-theme":"dark"},r.createElement("source",{src:n,type:"video/mp4"})))}function i(e){const t=e.src.replace("-dark","-light"),a=e.src.replace("-light","-dark"),n=()=>r.createElement(r.Fragment,null,r.createElement("img",{style:{width:"100%"},src:`${t}#light`}),r.createElement("img",{style:{width:"100%"},src:`${a}#dark`}));return void 0===e.children?n():r.createElement("table",null,r.createElement("tbody",null,r.createElement("tr",{style:{backgroundColor:"unset"}},r.createElement("td",null,n())),r.createElement("tr",{style:{backgroundColor:"unset"}},r.createElement("td",{style:{color:"var(--ifm-blockquote-color)"}},e.children))))}},1899:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=a(7462),n=(a(7294),a(3905)),i=a(7236);const o={slug:"2023-12-11-architecture-of-firedbg",title:"Architecture of FireDBG",author:"Chris Tsang",author_title:"FireDBG Team",author_url:"https://github.com/tyt2y3",author_image_url:"https://avatars.githubusercontent.com/u/1782664?v=4",image:"https://firedbg.sea-ql.org/img/dataflow-dark.png",tags:["news"]},l=void 0,s={permalink:"/blog/2023-12-11-architecture-of-firedbg",editUrl:"https://github.com/SeaQL/firedbg.sea-ql.org/edit/main/FireDBG/blog/blog/2023-12-11-architecture-of-firedbg.mdx",source:"@site/blog/2023-12-11-architecture-of-firedbg.mdx",title:"Architecture of FireDBG",description:"Under the hood of FireDBG",date:"2023-12-11T00:00:00.000Z",formattedDate:"December 11, 2023",tags:[{label:"news",permalink:"/blog/tags/news"}],readingTime:7.2,hasTruncateMarker:!1,authors:[{name:"Chris Tsang",title:"FireDBG Team",url:"https://github.com/tyt2y3",imageURL:"https://avatars.githubusercontent.com/u/1782664?v=4"}],frontMatter:{slug:"2023-12-11-architecture-of-firedbg",title:"Architecture of FireDBG",author:"Chris Tsang",author_title:"FireDBG Team",author_url:"https://github.com/tyt2y3",author_image_url:"https://avatars.githubusercontent.com/u/1782664?v=4",image:"https://firedbg.sea-ql.org/img/dataflow-dark.png",tags:["news"]},prevItem:{title:"Introducing FireDBG for Rust \ud83d\udd25",permalink:"/blog/2023-12-12-introducing-firedbg"}},p={authorsImageUrls:[void 0]},d=[{value:"Under the hood of FireDBG",id:"under-the-hood-of-firedbg",level:2},{value:"<code>firedbg-cli</code>",id:"firedbg-cli",level:3},{value:"<code>parser</code>",id:"parser",level:3},{value:"<code>debugger</code>",id:"debugger",level:3},{value:"<code>indexer</code>",id:"indexer",level:3},{value:"Mode of operation",id:"mode-of-operation",level:2},{value:"Overview",id:"overview",level:3},{value:"Static Analysis",id:"static-analysis",level:3},{value:"Runtime Debugging",id:"runtime-debugging",level:3},{value:"Multi-threading",id:"multi-threading",level:4},{value:"Value Capture",id:"value-capture",level:3},{value:"Event Index",id:"event-index",level:3},{value:"Parallelism",id:"parallelism",level:2},{value:"Support for other languages",id:"support-for-other-languages",level:2},{value:"Pure functional languages",id:"pure-functional-languages",level:3}],u={toc:d},c="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"under-the-hood-of-firedbg"},"Under the hood of FireDBG"),(0,n.kt)(i.E,{src:"/img/components-dark.png",mdxType:"Image"},"Component diagram of FireDBG"),(0,n.kt)("h3",{id:"firedbg-cli"},(0,n.kt)("inlineCode",{parentName:"h3"},"firedbg-cli")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"firedbg-cli")," drives everything. It acts as a proxy to ",(0,n.kt)("inlineCode",{parentName:"p"},"cargo"),", so a ",(0,n.kt)("inlineCode",{parentName:"p"},"cargo run")," command becomes ",(0,n.kt)("inlineCode",{parentName:"p"},"firedbg run"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"cargo test")," becomes ",(0,n.kt)("inlineCode",{parentName:"p"},"firedbg test")," and so on. ",(0,n.kt)("inlineCode",{parentName:"p"},"firedbg-cli")," also relies on ",(0,n.kt)("inlineCode",{parentName:"p"},"cargo"),' to list all the executable targets shown in the "Run and Debug" tab of VS Code.'),(0,n.kt)("h3",{id:"parser"},(0,n.kt)("inlineCode",{parentName:"h3"},"parser")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"firedbg-parser")," parses all source files in the workspace and outputs a symbol table per file. These ",(0,n.kt)("inlineCode",{parentName:"p"},".map")," files are cached, so they will be reused if the source files are unchanged since the last parse."),(0,n.kt)("h3",{id:"debugger"},(0,n.kt)("inlineCode",{parentName:"h3"},"debugger")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"firedbg-debugger")," is the debugging engine of FireDBG. It is configured according to ",(0,n.kt)("inlineCode",{parentName:"p"},"firedbg.toml"),". The debugger drives the target process via ",(0,n.kt)("inlineCode",{parentName:"p"},"lldb")," and streams the breakpoint events in real-time. The output file, with the extension ",(0,n.kt)("inlineCode",{parentName:"p"},".firedbg.ss"),", follows the binary file format defined in ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-streamer#sea-streamer-file-file-backend"},"SeaStreamer File"),"."),(0,n.kt)("p",null,"It sometimes uses ",(0,n.kt)("inlineCode",{parentName:"p"},"rustc")," on the host for miscellaneous things."),(0,n.kt)("h3",{id:"indexer"},(0,n.kt)("inlineCode",{parentName:"h3"},"indexer")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"firedbg-indexer")," is a streaming indexer. It can stream events from the ",(0,n.kt)("inlineCode",{parentName:"p"},".firedbg.ss")," file and process them in real-time. It outputs a ",(0,n.kt)("inlineCode",{parentName:"p"},".sqlite")," file with the same name, using ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm"},"SeaORM")," to drive SQLite. The index enables the GUI to quickly look up the call chain and frame info."),(0,n.kt)("h2",{id:"mode-of-operation"},"Mode of operation"),(0,n.kt)("h3",{id:"overview"},"Overview"),(0,n.kt)(i.E,{src:"/img/dataflow-dark.png",mdxType:"Image"},"Data flow diagram of FireDBG"),(0,n.kt)("p",null,"The basic idea of FireDBG is to automate the actions done by a user on a debugger CLI/TUI/GUI. For example, a user would usually set some breakpoints at some strategic locations and inspect all local variables every time a breakpoint is hit. FireDBG does the same! But our goal is to make each breakpoint hit as brief as possible, in order to keep the program-under-debug running in real-time. This is important because some resources like sockets and timers are time sensitive."),(0,n.kt)("p",null,'This mode of operation is called "galloping"',(0,n.kt)("sup",{parentName:"p",id:"fnref-1-85348e"},(0,n.kt)("a",{parentName:"sup",href:"#fn-1-85348e",className:"footnote-ref"},"1")),", as it only breaks on user code - library code and system calls are all skipped. In other words, the call tree we construct is not the full process call tree; it's down-sampled. In theory, we can use a VM to execute and record",(0,n.kt)("sup",{parentName:"p",id:"fnref-2-85348e"},(0,n.kt)("a",{parentName:"sup",href:"#fn-2-85348e",className:"footnote-ref"},"2"))," the process, then run it through FireDBG to condense the data."),(0,n.kt)("p",null,'The thesis is: "too much details obfuscate our understanding", and more often than not, we want to see the big picture. FireDBG lays out the call tree on a plane, so our brain can make sense of the two-dimensional space. The UX of the GUI is designed based on modern interactive maps',(0,n.kt)("sup",{parentName:"p",id:"fnref-3-85348e"},(0,n.kt)("a",{parentName:"sup",href:"#fn-3-85348e",className:"footnote-ref"},"3")),"."),(0,n.kt)("h3",{id:"static-analysis"},"Static Analysis"),(0,n.kt)("p",null,"We parse the Rust source files with ",(0,n.kt)("inlineCode",{parentName:"p"},"syn"),", looking for all functions, methods, and trait implementation blocks. The location and span of these functions are then dumped into ",(0,n.kt)("inlineCode",{parentName:"p"},".map")," files. In the future, we're hoping to support constructing a static call graph, so as to allow the debugger to only set breakpoints at functions reachable from ",(0,n.kt)("inlineCode",{parentName:"p"},"main")," (or the program entry point, whatever it is)."),(0,n.kt)("h3",{id:"runtime-debugging"},"Runtime Debugging"),(0,n.kt)("p",null,"On startup, the symbol tables are read. After loading the target executable into memory, the debugger loads the corresponding symbol tables and set breakpoints at those functions according to the configuration. We also set breakpoints on the panic handler and heap allocators."),(0,n.kt)("p",null,"The program will then be run. The debugger keeps a logical stack model for each thread. On each function call, a new frame ID will be assigned. The tuple (thread ID, frame ID, function call) uniquely identifies any point in program execution."),(0,n.kt)("p",null,"When a function is first called, we disassemble it. Then breakpoints are set at all ",(0,n.kt)("inlineCode",{parentName:"p"},"ret")," instructions, so that whenever the function returns, the breakpoints will be hit, and a function return event is recorded. (We also cache the ",(0,n.kt)("inlineCode",{parentName:"p"},"SBType")," definition of the function, with which the function return handler can salvage the return value from the registers, but this is an implementation detail). All parameters of the function are captured once the program has gone past the prologue",(0,n.kt)("sup",{parentName:"p",id:"fnref-4-85348e"},(0,n.kt)("a",{parentName:"sup",href:"#fn-4-85348e",className:"footnote-ref"},"4")),"."),(0,n.kt)("p",null,"All breakpoint events happening meanwhile will be tagged with the current frame ID in the current thread."),(0,n.kt)("p",null,"All events will be streamed out in real-time. The format of the stream events is defined in ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/protocol"},(0,n.kt)("inlineCode",{parentName:"a"},"firedbg-protocol")),"."),(0,n.kt)("h4",{id:"multi-threading"},"Multi-threading"),(0,n.kt)("p",null,"It is actually possible to debug multiple threads by hand using a conventional GUI debugger, you just need to know this one trick ;)"),(0,n.kt)("p",null,"Multiple threads can be hitting the same breakpoint at the same time, so we need to inspect all the threads each time a breakpoint is hit. We look at the PC address to determine whether this thread was actually paused on a breakpoint, and if so, record the event. All threads are resumed as soon as possible."),(0,n.kt)("h3",{id:"value-capture"},"Value Capture"),(0,n.kt)("p",null,"Value capture is currently done via ",(0,n.kt)("inlineCode",{parentName:"p"},"lldb"),"'s excellent ",(0,n.kt)("inlineCode",{parentName:"p"},"SBValue")," / ",(0,n.kt)("inlineCode",{parentName:"p"},"SBType"),' API. There are some edge cases, particularly around Rust\'s "complex enums" aka union types. There are many hacks',(0,n.kt)("sup",{parentName:"p",id:"fnref-5-85348e"},(0,n.kt)("a",{parentName:"sup",href:"#fn-5-85348e",className:"footnote-ref"},"5"))," done by ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/debugger/src/debugger.rs"},(0,n.kt)("inlineCode",{parentName:"a"},"firedbg-debugger"))," to ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/debugger/src/value/writer.rs"},"capture various Rust standard types"),", including but not limited to ",(0,n.kt)("inlineCode",{parentName:"p"},"Vec<u8>"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"&str"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"&dyn T"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Rc/Arc"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"HashMap"),"."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/debugger/src/debugger/return_value.rs"},"Return value capture")," is currently done by looking at the return type and guessing where it will be placed at, registers or stack, and salvage the value. More ideally, we would query the call convention and extract accordingly."),(0,n.kt)("p",null,"All values are serialized as binary blobs in native endian. There are several motivations: 1) faithfulness 2) avoiding floating point and utf-8 idiosyncrasies",(0,n.kt)("sup",{parentName:"p",id:"fnref-6-85348e"},(0,n.kt)("a",{parentName:"sup",href:"#fn-6-85348e",className:"footnote-ref"},"6"))," 3) avoiding serialization to strings which is slow 4) smaller file size."),(0,n.kt)("h3",{id:"event-index"},"Event Index"),(0,n.kt)("p",null,"The indexer reconstructs the call stack for each thread from the event stream. It then represents the call trees in SQL by self-references",(0,n.kt)("sup",{parentName:"p",id:"fnref-7-85348e"},(0,n.kt)("a",{parentName:"sup",href:"#fn-7-85348e",className:"footnote-ref"},"7")),". It also performs basic analysis like counting hits for each breakpoint."),(0,n.kt)("p",null,"The indexer deserializes the value blobs and transforms them into pretty-printed strings and JSON. They will then be queried by the GUI for display and visualization."),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/indexer/src/entity/"},"SeaORM schema")," is defined in ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/indexer/"},(0,n.kt)("inlineCode",{parentName:"a"},"firedbg-indexer")),"."),(0,n.kt)("h2",{id:"parallelism"},"Parallelism"),(0,n.kt)(i.E,{src:"/img/parallelism-dark.png",mdxType:"Image"},"Parallelism in FireDBG; outer boxes: processes; inner boxes: threads"),(0,n.kt)("p",null,"A lot of effort has been put in making FireDBG to improve responsiveness. The previous diagram shows the pipeline where data is streamed real-time. This diagram gives a different perspective: how the components work in parallel."),(0,n.kt)("p",null,"The Debugger, Indexer and GUI are separate processes, and each uses multiple threads for stream producer and consumer. Except in node.js the streamer is a subprocess instead of a thread."),(0,n.kt)("p",null,"The Call Tree Renderer is incremental: nodes are added on canvas as they arrive."),(0,n.kt)("h2",{id:"support-for-other-languages"},"Support for other languages"),(0,n.kt)("p",null,"Our vision is to bring FireDBG to ",(0,n.kt)("em",{parentName:"p"},"all")," programming languages. Some possible candidates are:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"C++: supported by ",(0,n.kt)("inlineCode",{parentName:"li"},"lldb"),"; but it is difficult to distinguish user code from library code"),(0,n.kt)("li",{parentName:"ul"},"Swift: supported by ",(0,n.kt)("inlineCode",{parentName:"li"},"lldb"),"; but need to support a lot of Apple system stuff"),(0,n.kt)("li",{parentName:"ul"},"Go: ",(0,n.kt)("inlineCode",{parentName:"li"},"delve")," seems very API drivable!"),(0,n.kt)("li",{parentName:"ul"},"node.js: we can use the DevTools Protocol"),(0,n.kt)("li",{parentName:"ul"},"Python: ",(0,n.kt)("inlineCode",{parentName:"li"},"debugpy")," seems very promising"),(0,n.kt)("li",{parentName:"ul"},"Your favourite language: suggestions are welcome!")),(0,n.kt)("p",null,"When designing this architecture, we have been keeping in mind how we'd piece in other languages. Each language would have its own ",(0,n.kt)("inlineCode",{parentName:"p"},"firedbg-xxx-debugger"),", outputting the same ",(0,n.kt)("inlineCode",{parentName:"p"},".firedbg.ss")," stream protocol. Primitives can more or less be shared so we can reuse the same ",(0,n.kt)("inlineCode",{parentName:"p"},"PValue"),". ",(0,n.kt)("inlineCode",{parentName:"p"},"RValue"),' actually stands for "Rust Value", so you can assume we\'d have ',(0,n.kt)("inlineCode",{parentName:"p"},"GoValue")," for Go, ",(0,n.kt)("inlineCode",{parentName:"p"},"JsValue")," for Javascript, etc."),(0,n.kt)("p",null,"We will ship multiple ",(0,n.kt)("inlineCode",{parentName:"p"},"indexer")," binaries, but they will likely share the same codebase."),(0,n.kt)("p",null,"The CLI will be each implemented in its own language."),(0,n.kt)("p",null,"The GUI will all share the same codebase, but of course each language will have its own VS Code extension."),(0,n.kt)("p",null,"Rust probably has the most complex type system",(0,n.kt)("sup",{parentName:"p",id:"fnref-8-85348e"},(0,n.kt)("a",{parentName:"sup",href:"#fn-8-85348e",className:"footnote-ref"},"8")),", hopefully it will not get much more complicated than what we have already implemented."),(0,n.kt)("p",null,"The async programming model should be similar among languages, so we should be able to visualize them under the same model."),(0,n.kt)("h3",{id:"pure-functional-languages"},"Pure functional languages"),(0,n.kt)("p",null,"The call tree visualization is universal to all programming languages",(0,n.kt)("sup",{parentName:"p",id:"fnref-9-85348e"},(0,n.kt)("a",{parentName:"sup",href:"#fn-9-85348e",className:"footnote-ref"},"9")),". Other than that I have not thought about other parts yet."),(0,n.kt)("div",{className:"footnotes"},(0,n.kt)("hr",{parentName:"div"}),(0,n.kt)("ol",{parentName:"div"},(0,n.kt)("li",{parentName:"ol",id:"fn-1-85348e"},'Or "tiptoeing", which is better?',(0,n.kt)("a",{parentName:"li",href:"#fnref-1-85348e",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-2-85348e"},"Or ",(0,n.kt)("inlineCode",{parentName:"li"},"rr"),", but we don't have a gdb driver yet",(0,n.kt)("a",{parentName:"li",href:"#fnref-2-85348e",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-3-85348e"},"You can pan with click-and-drag (or three finger drag on macOS), scroll to zoom; we also have (x, y) coordinates: x-axis is the depth, y-axis is the breadth in the tree",(0,n.kt)("a",{parentName:"li",href:"#fnref-3-85348e",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-4-85348e"},"Sometimes the function prologue is wrong and FireDBG currently has some logic to guess the prologue",(0,n.kt)("a",{parentName:"li",href:"#fnref-4-85348e",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-5-85348e"},"Many; maybe in the next version we will abandon debug symbols altogether",(0,n.kt)("a",{parentName:"li",href:"#fnref-5-85348e",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-6-85348e"},"They are not interpreted on serialization; only on deserialization which is the job of the indexer",(0,n.kt)("a",{parentName:"li",href:"#fnref-6-85348e",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-7-85348e"},"If we have a MySQL backend, a single recursive CTE query can reconstruct the call chain of a given frame",(0,n.kt)("a",{parentName:"li",href:"#fnref-7-85348e",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-8-85348e"},(0,n.kt)("em",{parentName:"li"},"Probably"),(0,n.kt)("a",{parentName:"li",href:"#fnref-8-85348e",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-9-85348e"},"We can probably make one for ",(0,n.kt)("a",{parentName:"li",href:"https://lispcookbook.github.io/cl-cookbook/debugging.html#trace"},"Lisp")," too",(0,n.kt)("a",{parentName:"li",href:"#fnref-9-85348e",className:"footnote-backref"},"\u21a9")))))}m.isMDXComponent=!0}}]);